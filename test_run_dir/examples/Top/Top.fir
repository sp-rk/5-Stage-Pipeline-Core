;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit Top : 
  module Instruction : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wrAddr : UInt<10>, rdData : UInt<32>}
    
    cmem mem : UInt<32>[1024] @[Instruction.scala 11:22]
    infer mport _T_11 = mem[io.wrAddr], clock @[Instruction.scala 12:25]
    io.rdData <= _T_11 @[Instruction.scala 12:19]
    
  module Pc : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<32>, pc4 : UInt<32>, pc : UInt<32>}
    
    reg reg : UInt, clock @[Pc.scala 11:26]
    reg <= UInt<32>("h00") @[Pc.scala 11:26]
    reg <= io.input @[Pc.scala 12:13]
    node _T_14 = add(reg, UInt<3>("h04")) @[Pc.scala 13:23]
    node _T_15 = tail(_T_14, 1) @[Pc.scala 13:23]
    io.pc4 <= _T_15 @[Pc.scala 13:16]
    io.pc <= reg @[Pc.scala 14:15]
    
  module Control : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opcode : UInt<7>, memwrite : UInt<1>, branch : SInt<1>, memread : UInt<1>, regwrite : UInt<1>, memtoreg : UInt<1>, aluop : UInt<3>, opA : UInt<2>, opB : UInt<1>, extend : UInt<2>, nxtpc : UInt<2>}
    
    node _T_28 = eq(io.opcode, UInt<6>("h033")) @[Control.scala 18:24]
    when _T_28 : @[Control.scala 18:41]
      io.memwrite <= UInt<1>("h00") @[Control.scala 19:29]
      io.branch <= asSInt(UInt<1>("h00")) @[Control.scala 20:27]
      io.memread <= UInt<1>("h00") @[Control.scala 21:28]
      io.regwrite <= UInt<1>("h01") @[Control.scala 22:29]
      io.memtoreg <= UInt<1>("h00") @[Control.scala 23:29]
      io.aluop <= UInt<1>("h00") @[Control.scala 24:26]
      io.opA <= UInt<1>("h00") @[Control.scala 25:24]
      io.opB <= UInt<1>("h00") @[Control.scala 26:24]
      io.extend <= UInt<1>("h00") @[Control.scala 27:27]
      io.nxtpc <= UInt<1>("h00") @[Control.scala 28:26]
      skip @[Control.scala 18:41]
    else : @[Control.scala 30:47]
      node _T_40 = eq(io.opcode, UInt<2>("h03")) @[Control.scala 30:30]
      when _T_40 : @[Control.scala 30:47]
        io.memwrite <= UInt<1>("h00") @[Control.scala 31:29]
        io.branch <= asSInt(UInt<1>("h00")) @[Control.scala 32:27]
        io.memread <= UInt<1>("h01") @[Control.scala 33:28]
        io.regwrite <= UInt<1>("h01") @[Control.scala 34:29]
        io.memtoreg <= UInt<1>("h01") @[Control.scala 35:29]
        io.aluop <= UInt<3>("h04") @[Control.scala 36:26]
        io.opA <= UInt<1>("h00") @[Control.scala 37:24]
        io.opB <= UInt<1>("h01") @[Control.scala 38:24]
        io.extend <= UInt<1>("h00") @[Control.scala 39:27]
        io.nxtpc <= UInt<1>("h00") @[Control.scala 40:26]
        skip @[Control.scala 30:47]
      else : @[Control.scala 42:47]
        node _T_52 = eq(io.opcode, UInt<6>("h023")) @[Control.scala 42:30]
        when _T_52 : @[Control.scala 42:47]
          io.memwrite <= UInt<1>("h01") @[Control.scala 43:29]
          io.branch <= asSInt(UInt<1>("h00")) @[Control.scala 44:27]
          io.memread <= UInt<1>("h00") @[Control.scala 45:28]
          io.regwrite <= UInt<1>("h00") @[Control.scala 46:29]
          io.memtoreg <= UInt<1>("h00") @[Control.scala 47:29]
          io.aluop <= UInt<3>("h05") @[Control.scala 48:26]
          io.opA <= UInt<1>("h00") @[Control.scala 49:24]
          io.opB <= UInt<1>("h01") @[Control.scala 50:24]
          io.extend <= UInt<2>("h02") @[Control.scala 51:27]
          io.nxtpc <= UInt<1>("h00") @[Control.scala 52:26]
          skip @[Control.scala 42:47]
        else : @[Control.scala 54:47]
          node _T_64 = eq(io.opcode, UInt<7>("h063")) @[Control.scala 54:30]
          when _T_64 : @[Control.scala 54:47]
            io.memwrite <= UInt<1>("h00") @[Control.scala 55:29]
            io.branch <= asSInt(UInt<2>("h01")) @[Control.scala 56:27]
            io.memread <= UInt<1>("h00") @[Control.scala 57:28]
            io.regwrite <= UInt<1>("h01") @[Control.scala 58:29]
            io.memtoreg <= UInt<1>("h00") @[Control.scala 59:29]
            io.aluop <= UInt<2>("h02") @[Control.scala 60:26]
            io.opA <= UInt<1>("h00") @[Control.scala 61:24]
            io.opB <= UInt<1>("h00") @[Control.scala 62:24]
            io.extend <= UInt<1>("h00") @[Control.scala 63:27]
            io.nxtpc <= UInt<1>("h01") @[Control.scala 64:26]
            skip @[Control.scala 54:47]
          else : @[Control.scala 66:47]
            node _T_76 = eq(io.opcode, UInt<5>("h013")) @[Control.scala 66:30]
            when _T_76 : @[Control.scala 66:47]
              io.memwrite <= UInt<1>("h00") @[Control.scala 67:29]
              io.branch <= asSInt(UInt<1>("h00")) @[Control.scala 68:27]
              io.memread <= UInt<1>("h00") @[Control.scala 69:28]
              io.regwrite <= UInt<1>("h01") @[Control.scala 70:29]
              io.memtoreg <= UInt<1>("h00") @[Control.scala 71:29]
              io.aluop <= UInt<1>("h01") @[Control.scala 72:26]
              io.opA <= UInt<1>("h00") @[Control.scala 73:24]
              io.opB <= UInt<1>("h01") @[Control.scala 74:24]
              io.extend <= UInt<1>("h00") @[Control.scala 75:27]
              io.nxtpc <= UInt<1>("h00") @[Control.scala 76:26]
              skip @[Control.scala 66:47]
            else : @[Control.scala 78:47]
              node _T_88 = eq(io.opcode, UInt<7>("h067")) @[Control.scala 78:30]
              when _T_88 : @[Control.scala 78:47]
                io.memwrite <= UInt<1>("h00") @[Control.scala 79:29]
                io.branch <= asSInt(UInt<1>("h00")) @[Control.scala 80:27]
                io.memread <= UInt<1>("h00") @[Control.scala 81:28]
                io.regwrite <= UInt<1>("h01") @[Control.scala 82:29]
                io.memtoreg <= UInt<1>("h00") @[Control.scala 83:29]
                io.aluop <= UInt<2>("h03") @[Control.scala 84:26]
                io.opA <= UInt<2>("h02") @[Control.scala 85:24]
                io.opB <= UInt<1>("h00") @[Control.scala 86:24]
                io.extend <= UInt<1>("h00") @[Control.scala 87:27]
                io.nxtpc <= UInt<2>("h03") @[Control.scala 88:26]
                skip @[Control.scala 78:47]
              else : @[Control.scala 90:47]
                node _T_100 = eq(io.opcode, UInt<7>("h06f")) @[Control.scala 90:30]
                when _T_100 : @[Control.scala 90:47]
                  io.memwrite <= UInt<1>("h00") @[Control.scala 91:29]
                  io.branch <= asSInt(UInt<1>("h00")) @[Control.scala 92:27]
                  io.memread <= UInt<1>("h00") @[Control.scala 93:28]
                  io.regwrite <= UInt<1>("h01") @[Control.scala 94:29]
                  io.memtoreg <= UInt<1>("h00") @[Control.scala 95:29]
                  io.aluop <= UInt<2>("h03") @[Control.scala 96:26]
                  io.opA <= UInt<2>("h02") @[Control.scala 97:24]
                  io.opB <= UInt<1>("h00") @[Control.scala 98:24]
                  io.extend <= UInt<1>("h00") @[Control.scala 99:27]
                  io.nxtpc <= UInt<2>("h02") @[Control.scala 100:26]
                  skip @[Control.scala 90:47]
                else : @[Control.scala 102:47]
                  node _T_112 = eq(io.opcode, UInt<6>("h037")) @[Control.scala 102:30]
                  when _T_112 : @[Control.scala 102:47]
                    io.memwrite <= UInt<1>("h00") @[Control.scala 103:29]
                    io.branch <= asSInt(UInt<1>("h00")) @[Control.scala 104:27]
                    io.memread <= UInt<1>("h00") @[Control.scala 105:28]
                    io.regwrite <= UInt<1>("h01") @[Control.scala 106:29]
                    io.memtoreg <= UInt<1>("h00") @[Control.scala 107:29]
                    io.aluop <= UInt<3>("h06") @[Control.scala 108:26]
                    io.opA <= UInt<2>("h03") @[Control.scala 109:24]
                    io.opB <= UInt<1>("h01") @[Control.scala 110:24]
                    io.extend <= UInt<1>("h01") @[Control.scala 111:27]
                    io.nxtpc <= UInt<1>("h00") @[Control.scala 112:26]
                    skip @[Control.scala 102:47]
                  else : @[Control.scala 114:20]
                    io.memwrite is invalid @[Control.scala 115:29]
                    io.branch is invalid @[Control.scala 116:27]
                    io.memread is invalid @[Control.scala 117:28]
                    io.regwrite is invalid @[Control.scala 118:29]
                    io.memtoreg is invalid @[Control.scala 119:29]
                    io.aluop is invalid @[Control.scala 120:26]
                    io.opA is invalid @[Control.scala 121:24]
                    io.opB is invalid @[Control.scala 122:24]
                    io.extend is invalid @[Control.scala 123:27]
                    io.nxtpc is invalid @[Control.scala 124:26]
                    skip @[Control.scala 114:20]
    
  module Imme : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip inst : UInt<32>, flip pc : UInt<32>, Sout : SInt<32>, Uout : SInt<32>, Sbout : SInt<32>, Ujout : SInt<32>, Iout : SInt<32>}
    
    node extract1 = bits(io.inst, 11, 7) @[Imme.scala 18:31]
    node extract2 = bits(io.inst, 31, 25) @[Imme.scala 19:31]
    node combined0 = cat(extract2, extract1) @[Cat.scala 30:58]
    node _T_19 = bits(combined0, 11, 11) @[Imme.scala 21:42]
    node _T_20 = bits(_T_19, 0, 0) @[Bitwise.scala 72:15]
    node _T_23 = mux(_T_20, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _T_24 = cat(_T_23, combined0) @[Cat.scala 30:58]
    node _T_25 = asSInt(_T_24) @[Imme.scala 21:60]
    io.Sout <= _T_25 @[Imme.scala 21:17]
    node extract3 = bits(io.inst, 31, 12) @[Imme.scala 24:31]
    node _T_26 = bits(extract3, 19, 19) @[Imme.scala 25:42]
    node _T_27 = bits(_T_26, 0, 0) @[Bitwise.scala 72:15]
    node _T_30 = mux(_T_27, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _T_31 = cat(_T_30, extract3) @[Cat.scala 30:58]
    node _T_33 = dshl(_T_31, UInt<4>("h0c")) @[Imme.scala 25:59]
    node _T_34 = asSInt(_T_33) @[Imme.scala 25:68]
    io.Uout <= _T_34 @[Imme.scala 25:17]
    node _T_35 = bits(combined0, 11, 11) @[Imme.scala 28:38]
    node _T_36 = bits(combined0, 0, 0) @[Imme.scala 28:53]
    node _T_37 = bits(combined0, 10, 5) @[Imme.scala 28:67]
    node _T_38 = bits(combined0, 4, 1) @[Imme.scala 28:84]
    node _T_40 = cat(_T_38, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_41 = cat(_T_35, _T_36) @[Cat.scala 30:58]
    node _T_42 = cat(_T_41, _T_37) @[Cat.scala 30:58]
    node combined1 = cat(_T_42, _T_40) @[Cat.scala 30:58]
    node _T_43 = bits(combined1, 12, 12) @[Imme.scala 29:44]
    node _T_44 = bits(_T_43, 0, 0) @[Bitwise.scala 72:15]
    node _T_47 = mux(_T_44, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _T_48 = cat(_T_47, combined1) @[Cat.scala 30:58]
    node _T_49 = add(_T_48, io.pc) @[Imme.scala 29:62]
    node _T_50 = tail(_T_49, 1) @[Imme.scala 29:62]
    node _T_51 = asSInt(_T_50) @[Imme.scala 29:71]
    io.Sbout <= _T_51 @[Imme.scala 29:18]
    node extract4 = bits(io.inst, 31, 20) @[Imme.scala 32:31]
    node _T_52 = bits(extract4, 11, 11) @[Imme.scala 33:41]
    node _T_53 = bits(_T_52, 0, 0) @[Bitwise.scala 72:15]
    node _T_56 = mux(_T_53, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _T_57 = cat(_T_56, extract4) @[Cat.scala 30:58]
    node _T_58 = asSInt(_T_57) @[Imme.scala 33:58]
    io.Iout <= _T_58 @[Imme.scala 33:17]
    node _T_59 = bits(io.inst, 31, 31) @[Imme.scala 37:36]
    node _T_60 = bits(io.inst, 19, 12) @[Imme.scala 37:49]
    node _T_61 = bits(io.inst, 20, 20) @[Imme.scala 37:65]
    node _T_62 = bits(io.inst, 30, 21) @[Imme.scala 37:78]
    node _T_64 = cat(_T_62, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_65 = cat(_T_59, _T_60) @[Cat.scala 30:58]
    node _T_66 = cat(_T_65, _T_61) @[Cat.scala 30:58]
    node combined2 = cat(_T_66, _T_64) @[Cat.scala 30:58]
    node _T_67 = bits(io.inst, 31, 31) @[Imme.scala 38:42]
    node _T_68 = bits(_T_67, 0, 0) @[Bitwise.scala 72:15]
    node _T_71 = mux(_T_68, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node _T_72 = cat(_T_71, combined2) @[Cat.scala 30:58]
    node _T_73 = add(_T_72, io.pc) @[Imme.scala 38:60]
    node _T_74 = tail(_T_73, 1) @[Imme.scala 38:60]
    node _T_75 = asSInt(_T_74) @[Imme.scala 38:69]
    io.Ujout <= _T_75 @[Imme.scala 38:18]
    
  module Alu : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rs1 : SInt<32>, flip rs2 : SInt<32>, flip cntrl : UInt<5>, out : SInt<32>, branch : SInt<32>}
    
    node _T_16 = eq(io.cntrl, UInt<1>("h00")) @[Alu.scala 15:23]
    when _T_16 : @[Alu.scala 15:38]
      node _T_17 = add(io.rs1, io.rs2) @[Alu.scala 16:34]
      node _T_18 = tail(_T_17, 1) @[Alu.scala 16:34]
      node _T_19 = asSInt(_T_18) @[Alu.scala 16:34]
      io.out <= _T_19 @[Alu.scala 16:24]
      skip @[Alu.scala 15:38]
    else : @[Alu.scala 18:44]
      node _T_21 = eq(io.cntrl, UInt<1>("h01")) @[Alu.scala 18:29]
      when _T_21 : @[Alu.scala 18:44]
        node _T_22 = bits(io.rs2, 4, 0) @[Alu.scala 19:35]
        node _T_23 = dshl(io.rs1, _T_22) @[Alu.scala 20:34]
        io.out <= _T_23 @[Alu.scala 20:24]
        skip @[Alu.scala 18:44]
      else : @[Alu.scala 22:44]
        node _T_25 = eq(io.cntrl, UInt<2>("h02")) @[Alu.scala 22:29]
        when _T_25 : @[Alu.scala 22:44]
          node _T_26 = lt(io.rs1, io.rs2) @[Alu.scala 23:29]
          when _T_26 : @[Alu.scala 23:38]
            io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 24:32]
            skip @[Alu.scala 23:38]
          else : @[Alu.scala 25:28]
            io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 26:32]
            skip @[Alu.scala 25:28]
          skip @[Alu.scala 22:44]
        else : @[Alu.scala 29:71]
          node _T_30 = eq(io.cntrl, UInt<2>("h03")) @[Alu.scala 29:29]
          node _T_32 = eq(io.cntrl, UInt<5>("h016")) @[Alu.scala 29:56]
          node _T_33 = or(_T_30, _T_32) @[Alu.scala 29:44]
          when _T_33 : @[Alu.scala 29:71]
            node _T_34 = asUInt(io.rs1) @[Alu.scala 30:29]
            node _T_35 = asUInt(io.rs2) @[Alu.scala 30:45]
            node _T_36 = lt(_T_34, _T_35) @[Alu.scala 30:36]
            when _T_36 : @[Alu.scala 30:52]
              io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 31:32]
              skip @[Alu.scala 30:52]
            else : @[Alu.scala 32:28]
              io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 33:32]
              skip @[Alu.scala 32:28]
            skip @[Alu.scala 29:71]
          else : @[Alu.scala 36:44]
            node _T_40 = eq(io.cntrl, UInt<3>("h04")) @[Alu.scala 36:29]
            when _T_40 : @[Alu.scala 36:44]
              node _T_41 = xor(io.rs1, io.rs2) @[Alu.scala 37:34]
              node _T_42 = asSInt(_T_41) @[Alu.scala 37:34]
              io.out <= _T_42 @[Alu.scala 37:24]
              skip @[Alu.scala 36:44]
            else : @[Alu.scala 39:44]
              node _T_44 = eq(io.cntrl, UInt<3>("h05")) @[Alu.scala 39:29]
              when _T_44 : @[Alu.scala 39:44]
                node _T_45 = bits(io.rs2, 4, 0) @[Alu.scala 40:36]
                node _T_46 = dshr(io.rs1, _T_45) @[Alu.scala 41:34]
                io.out <= _T_46 @[Alu.scala 41:24]
                skip @[Alu.scala 39:44]
              else : @[Alu.scala 43:44]
                node _T_48 = eq(io.cntrl, UInt<3>("h06")) @[Alu.scala 43:29]
                when _T_48 : @[Alu.scala 43:44]
                  node _T_49 = or(io.rs1, io.rs2) @[Alu.scala 44:34]
                  node _T_50 = asSInt(_T_49) @[Alu.scala 44:34]
                  io.out <= _T_50 @[Alu.scala 44:24]
                  skip @[Alu.scala 43:44]
                else : @[Alu.scala 46:44]
                  node _T_52 = eq(io.cntrl, UInt<3>("h07")) @[Alu.scala 46:29]
                  when _T_52 : @[Alu.scala 46:44]
                    node _T_53 = and(io.rs1, io.rs2) @[Alu.scala 47:34]
                    node _T_54 = asSInt(_T_53) @[Alu.scala 47:34]
                    io.out <= _T_54 @[Alu.scala 47:24]
                    skip @[Alu.scala 46:44]
                  else : @[Alu.scala 49:45]
                    node _T_56 = eq(io.cntrl, UInt<4>("h08")) @[Alu.scala 49:29]
                    when _T_56 : @[Alu.scala 49:45]
                      node _T_57 = sub(io.rs1, io.rs2) @[Alu.scala 50:34]
                      node _T_58 = tail(_T_57, 1) @[Alu.scala 50:34]
                      node _T_59 = asSInt(_T_58) @[Alu.scala 50:34]
                      io.out <= _T_59 @[Alu.scala 50:24]
                      skip @[Alu.scala 49:45]
                    else : @[Alu.scala 52:44]
                      node _T_61 = eq(io.cntrl, UInt<4>("h0d")) @[Alu.scala 52:29]
                      when _T_61 : @[Alu.scala 52:44]
                        node _T_62 = bits(io.rs2, 4, 0) @[Alu.scala 53:36]
                        node _T_63 = dshr(io.rs1, _T_62) @[Alu.scala 54:34]
                        io.out <= _T_63 @[Alu.scala 54:24]
                        skip @[Alu.scala 52:44]
                      else : @[Alu.scala 56:44]
                        node _T_65 = eq(io.cntrl, UInt<5>("h010")) @[Alu.scala 56:29]
                        when _T_65 : @[Alu.scala 56:44]
                          node _T_66 = eq(io.rs1, io.rs2) @[Alu.scala 57:29]
                          when _T_66 : @[Alu.scala 57:40]
                            io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 58:32]
                            skip @[Alu.scala 57:40]
                          else : @[Alu.scala 59:28]
                            io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 60:32]
                            skip @[Alu.scala 59:28]
                          skip @[Alu.scala 56:44]
                        else : @[Alu.scala 63:44]
                          node _T_70 = eq(io.cntrl, UInt<5>("h011")) @[Alu.scala 63:29]
                          when _T_70 : @[Alu.scala 63:44]
                            node _T_71 = neq(io.rs1, io.rs2) @[Alu.scala 64:29]
                            when _T_71 : @[Alu.scala 64:40]
                              io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 65:32]
                              skip @[Alu.scala 64:40]
                            else : @[Alu.scala 66:28]
                              io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 67:32]
                              skip @[Alu.scala 66:28]
                            skip @[Alu.scala 63:44]
                          else : @[Alu.scala 70:44]
                            node _T_75 = eq(io.cntrl, UInt<5>("h014")) @[Alu.scala 70:29]
                            when _T_75 : @[Alu.scala 70:44]
                              node _T_76 = lt(io.rs1, io.rs2) @[Alu.scala 71:29]
                              when _T_76 : @[Alu.scala 71:38]
                                io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 72:32]
                                skip @[Alu.scala 71:38]
                              else : @[Alu.scala 73:28]
                                io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 74:32]
                                skip @[Alu.scala 73:28]
                              skip @[Alu.scala 70:44]
                            else : @[Alu.scala 77:44]
                              node _T_80 = eq(io.cntrl, UInt<5>("h015")) @[Alu.scala 77:29]
                              when _T_80 : @[Alu.scala 77:44]
                                node _T_81 = geq(io.rs1, io.rs2) @[Alu.scala 78:29]
                                when _T_81 : @[Alu.scala 78:39]
                                  io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 79:32]
                                  skip @[Alu.scala 78:39]
                                else : @[Alu.scala 80:28]
                                  io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 81:32]
                                  skip @[Alu.scala 80:28]
                                skip @[Alu.scala 77:44]
                              else : @[Alu.scala 84:44]
                                node _T_85 = eq(io.cntrl, UInt<5>("h017")) @[Alu.scala 84:29]
                                when _T_85 : @[Alu.scala 84:44]
                                  node _T_86 = geq(io.rs1, io.rs2) @[Alu.scala 85:29]
                                  when _T_86 : @[Alu.scala 85:39]
                                    io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 86:32]
                                    skip @[Alu.scala 85:39]
                                  else : @[Alu.scala 87:28]
                                    io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 88:32]
                                    skip @[Alu.scala 87:28]
                                  skip @[Alu.scala 84:44]
                                else : @[Alu.scala 91:44]
                                  node _T_90 = eq(io.cntrl, UInt<5>("h01f")) @[Alu.scala 91:29]
                                  when _T_90 : @[Alu.scala 91:44]
                                    io.out <= io.rs1 @[Alu.scala 92:24]
                                    skip @[Alu.scala 91:44]
                                  else : @[Alu.scala 94:20]
                                    io.out is invalid @[Alu.scala 95:24]
                                    skip @[Alu.scala 94:20]
    node branchcheck = bits(io.cntrl, 4, 3) @[Alu.scala 98:35]
    node _T_92 = eq(branchcheck, UInt<2>("h02")) @[Alu.scala 99:26]
    node _T_94 = eq(io.out, asSInt(UInt<2>("h01"))) @[Alu.scala 99:48]
    node _T_95 = and(_T_92, _T_94) @[Alu.scala 99:38]
    when _T_95 : @[Alu.scala 99:56]
      io.branch <= asSInt(UInt<2>("h01")) @[Alu.scala 100:27]
      skip @[Alu.scala 99:56]
    else : @[Alu.scala 101:20]
      io.branch <= asSInt(UInt<1>("h00")) @[Alu.scala 102:27]
      skip @[Alu.scala 101:20]
    
  module AluOp : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip fnc3 : UInt<3>, flip fnc7 : UInt<1>, flip aluop : UInt<3>, out : UInt<5>}
    
    node _T_14 = eq(io.aluop, UInt<1>("h00")) @[AluOp.scala 14:24]
    when _T_14 : @[AluOp.scala 14:37]
      node _T_16 = cat(UInt<1>("h00"), io.fnc7) @[Cat.scala 30:58]
      node _T_17 = cat(_T_16, io.fnc3) @[Cat.scala 30:58]
      io.out <= _T_17 @[AluOp.scala 15:24]
      skip @[AluOp.scala 14:37]
    else : @[AluOp.scala 16:43]
      node _T_19 = eq(io.aluop, UInt<3>("h04")) @[AluOp.scala 16:30]
      when _T_19 : @[AluOp.scala 16:43]
        io.out <= UInt<1>("h00") @[AluOp.scala 17:24]
        skip @[AluOp.scala 16:43]
      else : @[AluOp.scala 18:43]
        node _T_22 = eq(io.aluop, UInt<3>("h05")) @[AluOp.scala 18:30]
        when _T_22 : @[AluOp.scala 18:43]
          io.out <= UInt<1>("h00") @[AluOp.scala 19:24]
          skip @[AluOp.scala 18:43]
        else : @[AluOp.scala 20:43]
          node _T_25 = eq(io.aluop, UInt<2>("h02")) @[AluOp.scala 20:30]
          when _T_25 : @[AluOp.scala 20:43]
            node _T_27 = cat(UInt<2>("h02"), io.fnc3) @[Cat.scala 30:58]
            io.out <= _T_27 @[AluOp.scala 21:24]
            skip @[AluOp.scala 20:43]
          else : @[AluOp.scala 22:43]
            node _T_29 = eq(io.aluop, UInt<1>("h01")) @[AluOp.scala 22:30]
            when _T_29 : @[AluOp.scala 22:43]
              node _T_31 = eq(io.fnc3, UInt<3>("h05")) @[AluOp.scala 23:31]
              when _T_31 : @[AluOp.scala 23:44]
                node _T_33 = cat(UInt<1>("h00"), io.fnc7) @[Cat.scala 30:58]
                node _T_34 = cat(_T_33, io.fnc3) @[Cat.scala 30:58]
                io.out <= _T_34 @[AluOp.scala 24:32]
                skip @[AluOp.scala 23:44]
              else : @[AluOp.scala 25:29]
                node _T_36 = cat(UInt<1>("h00"), io.fnc3) @[Cat.scala 30:58]
                io.out <= _T_36 @[AluOp.scala 26:32]
                skip @[AluOp.scala 25:29]
              skip @[AluOp.scala 22:43]
            else : @[AluOp.scala 28:43]
              node _T_38 = eq(io.aluop, UInt<2>("h03")) @[AluOp.scala 28:30]
              when _T_38 : @[AluOp.scala 28:43]
                io.out <= UInt<5>("h01f") @[AluOp.scala 29:24]
                skip @[AluOp.scala 28:43]
              else : @[AluOp.scala 30:43]
                node _T_41 = eq(io.aluop, UInt<3>("h06")) @[AluOp.scala 30:30]
                when _T_41 : @[AluOp.scala 30:43]
                  io.out <= UInt<1>("h00") @[AluOp.scala 31:24]
                  skip @[AluOp.scala 30:43]
                else : @[AluOp.scala 32:21]
                  io.out is invalid @[AluOp.scala 33:24]
                  skip @[AluOp.scala 32:21]
    
  module Regfile : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip regwrite : UInt<1>, flip rd_sel : UInt<5>, flip r1 : UInt<5>, flip r2 : UInt<5>, flip writedata : SInt<32>, rs1 : SInt<32>, rs2 : SInt<32>}
    
    reg registers : SInt<32>[32], clock @[Regfile.scala 15:28]
    registers[0] <= asSInt(UInt<1>("h00")) @[Regfile.scala 16:22]
    io.rs1 <= registers[io.r1] @[Regfile.scala 17:16]
    io.rs2 <= registers[io.r2] @[Regfile.scala 18:16]
    node _T_60 = eq(io.regwrite, UInt<1>("h01")) @[Regfile.scala 19:26]
    when _T_60 : @[Regfile.scala 19:34]
      node _T_62 = eq(io.rd_sel, UInt<1>("h00")) @[Regfile.scala 20:32]
      when _T_62 : @[Regfile.scala 20:47]
        registers[io.rd_sel] <= asSInt(UInt<1>("h00")) @[Regfile.scala 21:46]
        skip @[Regfile.scala 20:47]
      else : @[Regfile.scala 22:29]
        registers[io.rd_sel] <= io.writedata @[Regfile.scala 23:46]
        skip @[Regfile.scala 22:29]
      skip @[Regfile.scala 19:34]
    
  module Jalrr : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input1 : SInt<32>, flip input2 : SInt<32>, out : UInt<32>}
    
    node _T_11 = add(io.input1, io.input2) @[Jalrr.scala 11:30]
    node _T_12 = tail(_T_11, 1) @[Jalrr.scala 11:30]
    node _T_13 = asSInt(_T_12) @[Jalrr.scala 11:30]
    node _T_14 = asUInt(_T_13) @[Jalrr.scala 11:43]
    node _T_16 = and(_T_14, UInt<32>("h0fffffffe")) @[Jalrr.scala 11:50]
    io.out <= _T_16 @[Jalrr.scala 11:16]
    
  module Memory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : SInt<32>, flip load : UInt<1>, flip store : UInt<1>, flip addd : UInt<8>, flip data : SInt<32>}
    
    cmem mem : UInt<32>[1024] @[Memory.scala 13:22]
    node _T_18 = eq(io.load, UInt<1>("h01")) @[Memory.scala 14:22]
    when _T_18 : @[Memory.scala 14:33]
      infer mport _T_19 = mem[io.addd], clock @[Memory.scala 15:30]
      node _T_20 = asSInt(_T_19) @[Memory.scala 15:40]
      io.out <= _T_20 @[Memory.scala 15:24]
      skip @[Memory.scala 14:33]
    else : @[Memory.scala 16:40]
      node _T_22 = eq(io.store, UInt<1>("h01")) @[Memory.scala 16:29]
      when _T_22 : @[Memory.scala 16:40]
        infer mport _T_23 = mem[io.addd], clock @[Memory.scala 17:20]
        node _T_24 = asUInt(io.data) @[Memory.scala 17:43]
        _T_23 <= _T_24 @[Memory.scala 17:30]
        io.out is invalid @[Memory.scala 18:24]
        skip @[Memory.scala 16:40]
      else : @[Memory.scala 19:20]
        io.out is invalid @[Memory.scala 20:24]
        skip @[Memory.scala 19:20]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {regout : SInt<32>}
    
    inst Instruction of Instruction @[Top.scala 14:33]
    Instruction.clock <= clock
    Instruction.reset <= reset
    inst pc of Pc @[Top.scala 15:24]
    pc.clock <= clock
    pc.reset <= reset
    inst control of Control @[Top.scala 16:29]
    control.clock <= clock
    control.reset <= reset
    inst immediate of Imme @[Top.scala 17:31]
    immediate.clock <= clock
    immediate.reset <= reset
    inst alu of Alu @[Top.scala 18:25]
    alu.clock <= clock
    alu.reset <= reset
    inst alucontrol of AluOp @[Top.scala 19:32]
    alucontrol.clock <= clock
    alucontrol.reset <= reset
    inst regfile of Regfile @[Top.scala 20:29]
    regfile.clock <= clock
    regfile.reset <= reset
    inst jalr of Jalrr @[Top.scala 21:26]
    jalr.clock <= clock
    jalr.reset <= reset
    inst memory of Memory @[Top.scala 22:28]
    memory.clock <= clock
    memory.reset <= reset
    node _T_7 = bits(pc.io.pc, 11, 2) @[Top.scala 23:42]
    Instruction.io.wrAddr <= _T_7 @[Top.scala 23:31]
    node _T_8 = and(control.io.branch, alu.io.branch) @[Top.scala 26:38]
    node bout = asSInt(_T_8) @[Top.scala 26:38]
    node _T_10 = eq(control.io.nxtpc, UInt<1>("h00")) @[Top.scala 28:31]
    when _T_10 : @[Top.scala 28:43]
      pc.io.input <= pc.io.pc4 @[Top.scala 29:29]
      skip @[Top.scala 28:43]
    else : @[Top.scala 30:49]
      node _T_12 = eq(control.io.nxtpc, UInt<2>("h03")) @[Top.scala 30:37]
      when _T_12 : @[Top.scala 30:49]
        pc.io.input <= jalr.io.out @[Top.scala 31:29]
        skip @[Top.scala 30:49]
      else : @[Top.scala 32:49]
        node _T_14 = eq(control.io.nxtpc, UInt<2>("h02")) @[Top.scala 32:37]
        when _T_14 : @[Top.scala 32:49]
          node _T_15 = asUInt(immediate.io.Ujout) @[Top.scala 33:51]
          pc.io.input <= _T_15 @[Top.scala 33:29]
          skip @[Top.scala 32:49]
        else : @[Top.scala 34:49]
          node _T_17 = eq(control.io.nxtpc, UInt<1>("h01")) @[Top.scala 34:37]
          when _T_17 : @[Top.scala 34:49]
            node _T_19 = eq(bout, asSInt(UInt<2>("h01"))) @[Top.scala 35:27]
            when _T_19 : @[Top.scala 35:35]
              node _T_20 = asUInt(immediate.io.Sbout) @[Top.scala 36:59]
              pc.io.input <= _T_20 @[Top.scala 36:37]
              skip @[Top.scala 35:35]
            else : @[Top.scala 37:28]
              pc.io.input is invalid @[Top.scala 38:37]
              skip @[Top.scala 37:28]
            skip @[Top.scala 34:49]
          else : @[Top.scala 40:20]
            pc.io.input is invalid @[Top.scala 41:29]
            skip @[Top.scala 40:20]
    node _T_21 = bits(Instruction.io.rdData, 6, 0) @[Top.scala 45:41]
    control.io.opcode <= _T_21 @[Top.scala 45:27]
    immediate.io.inst <= Instruction.io.rdData @[Top.scala 46:27]
    immediate.io.pc <= pc.io.pc @[Top.scala 47:25]
    node _T_22 = bits(Instruction.io.rdData, 19, 15) @[Top.scala 50:37]
    regfile.io.r1 <= _T_22 @[Top.scala 50:23]
    node _T_23 = bits(Instruction.io.rdData, 24, 20) @[Top.scala 51:37]
    regfile.io.r2 <= _T_23 @[Top.scala 51:23]
    node _T_24 = bits(Instruction.io.rdData, 11, 7) @[Top.scala 52:41]
    regfile.io.rd_sel <= _T_24 @[Top.scala 52:27]
    regfile.io.regwrite <= control.io.regwrite @[Top.scala 53:29]
    alucontrol.io.aluop <= control.io.aluop @[Top.scala 55:29]
    node _T_25 = bits(Instruction.io.rdData, 14, 12) @[Top.scala 56:42]
    alucontrol.io.fnc3 <= _T_25 @[Top.scala 56:28]
    node _T_26 = bits(Instruction.io.rdData, 30, 30) @[Top.scala 57:42]
    alucontrol.io.fnc7 <= _T_26 @[Top.scala 57:28]
    node _T_28 = eq(control.io.opA, UInt<1>("h00")) @[Top.scala 60:30]
    node _T_30 = eq(control.io.opA, UInt<2>("h03")) @[Top.scala 60:62]
    node _T_31 = or(_T_28, _T_30) @[Top.scala 60:43]
    when _T_31 : @[Top.scala 60:75]
      alu.io.rs1 <= regfile.io.rs1 @[Top.scala 61:28]
      skip @[Top.scala 60:75]
    else : @[Top.scala 62:47]
      node _T_33 = eq(control.io.opA, UInt<2>("h02")) @[Top.scala 62:35]
      when _T_33 : @[Top.scala 62:47]
        node _T_34 = asSInt(pc.io.pc4) @[Top.scala 63:41]
        alu.io.rs1 <= _T_34 @[Top.scala 63:28]
        skip @[Top.scala 62:47]
      else : @[Top.scala 64:20]
        alu.io.rs1 is invalid @[Top.scala 65:28]
        skip @[Top.scala 64:20]
    jalr.io.input1 <= regfile.io.rs1 @[Top.scala 68:24]
    node _T_36 = eq(control.io.extend, UInt<1>("h00")) @[Top.scala 69:33]
    node _T_38 = eq(control.io.nxtpc, UInt<2>("h03")) @[Top.scala 69:67]
    node _T_39 = and(_T_36, _T_38) @[Top.scala 69:46]
    when _T_39 : @[Top.scala 69:80]
      jalr.io.input2 <= immediate.io.Iout @[Top.scala 70:32]
      skip @[Top.scala 69:80]
    else : @[Top.scala 71:20]
      jalr.io.input2 is invalid @[Top.scala 72:32]
      skip @[Top.scala 71:20]
    node _T_41 = eq(control.io.extend, UInt<1>("h00")) @[Top.scala 77:32]
    node _T_43 = eq(control.io.opB, UInt<1>("h01")) @[Top.scala 77:62]
    node _T_44 = and(_T_41, _T_43) @[Top.scala 77:44]
    when _T_44 : @[Top.scala 77:73]
      alu.io.rs2 <= immediate.io.Iout @[Top.scala 78:28]
      skip @[Top.scala 77:73]
    else : @[Top.scala 79:79]
      node _T_46 = eq(control.io.extend, UInt<2>("h02")) @[Top.scala 79:38]
      node _T_48 = eq(control.io.opB, UInt<1>("h01")) @[Top.scala 79:68]
      node _T_49 = and(_T_46, _T_48) @[Top.scala 79:50]
      when _T_49 : @[Top.scala 79:79]
        alu.io.rs2 <= immediate.io.Sout @[Top.scala 80:28]
        skip @[Top.scala 79:79]
      else : @[Top.scala 81:79]
        node _T_51 = eq(control.io.extend, UInt<1>("h01")) @[Top.scala 81:38]
        node _T_53 = eq(control.io.opB, UInt<1>("h01")) @[Top.scala 81:68]
        node _T_54 = and(_T_51, _T_53) @[Top.scala 81:50]
        when _T_54 : @[Top.scala 81:79]
          alu.io.rs2 <= immediate.io.Uout @[Top.scala 82:28]
          skip @[Top.scala 81:79]
        else : @[Top.scala 83:20]
          alu.io.rs2 <= regfile.io.rs2 @[Top.scala 84:28]
          skip @[Top.scala 83:20]
    memory.io.load <= control.io.memread @[Top.scala 87:24]
    memory.io.store <= control.io.memwrite @[Top.scala 88:25]
    memory.io.data <= regfile.io.rs2 @[Top.scala 89:24]
    node _T_55 = bits(alu.io.out, 9, 2) @[Top.scala 90:37]
    memory.io.addd <= _T_55 @[Top.scala 90:24]
    alu.io.cntrl <= alucontrol.io.out @[Top.scala 92:22]
    node _T_57 = eq(control.io.memtoreg, UInt<1>("h01")) @[Top.scala 93:34]
    when _T_57 : @[Top.scala 93:45]
      regfile.io.writedata <= memory.io.out @[Top.scala 94:38]
      skip @[Top.scala 93:45]
    else : @[Top.scala 95:20]
      regfile.io.writedata <= alu.io.out @[Top.scala 96:38]
      skip @[Top.scala 95:20]
    io.regout <= regfile.io.writedata @[Top.scala 99:19]
    
