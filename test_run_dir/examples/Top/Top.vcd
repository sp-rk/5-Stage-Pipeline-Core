$version Generated by VerilatedVcd $end
$date Tue Oct 22 00:06:39 2019
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 m clock $end
  $var wire 32 o io_regout [31:0] $end
  $var wire  1 n reset $end
  $scope module Top $end
   $var wire  1 m Instruction_clock $end
   $var wire 32 # Instruction_io_rdData [31:0] $end
   $var wire 10 J Instruction_io_wrAddr [9:0] $end
   $var wire  5 5 alu_io_cntrl [4:0] $end
   $var wire 32 6 alu_io_out [31:0] $end
   $var wire 32 3 alu_io_rs1 [31:0] $end
   $var wire 32 4 alu_io_rs2 [31:0] $end
   $var wire  3 ) alucontrol_io_aluop [2:0] $end
   $var wire  3 7 alucontrol_io_fnc3 [2:0] $end
   $var wire  1 8 alucontrol_io_fnc7 $end
   $var wire  5 5 alucontrol_io_out [4:0] $end
   $var wire  1 m clock $end
   $var wire  3 ) control_io_aluop [2:0] $end
   $var wire  2 , control_io_extend [1:0] $end
   $var wire  1 ' control_io_memread $end
   $var wire  1 ' control_io_memtoreg $end
   $var wire  1 & control_io_memwrite $end
   $var wire  2 - control_io_nxtpc [1:0] $end
   $var wire  2 * control_io_opA [1:0] $end
   $var wire  1 + control_io_opB $end
   $var wire  7 % control_io_opcode [6:0] $end
   $var wire  1 ( control_io_regwrite $end
   $var wire 32 2 immediate_io_Iout [31:0] $end
   $var wire 32 0 immediate_io_Sbout [31:0] $end
   $var wire 32 . immediate_io_Sout [31:0] $end
   $var wire 32 1 immediate_io_Ujout [31:0] $end
   $var wire 32 / immediate_io_Uout [31:0] $end
   $var wire 32 # immediate_io_inst [31:0] $end
   $var wire 32 L immediate_io_pc [31:0] $end
   $var wire 32 o io_regout [31:0] $end
   $var wire 32 = jalr_io_input1 [31:0] $end
   $var wire 32 2 jalr_io_input2 [31:0] $end
   $var wire 32 ? jalr_io_out [31:0] $end
   $var wire  1 m memory_clock $end
   $var wire  8 A memory_io_addd [7:0] $end
   $var wire 32 > memory_io_data [31:0] $end
   $var wire  1 ' memory_io_load $end
   $var wire 32 @ memory_io_out [31:0] $end
   $var wire  1 & memory_io_store $end
   $var wire  1 m pc_clock $end
   $var wire 32 $ pc_io_input [31:0] $end
   $var wire 32 L pc_io_pc [31:0] $end
   $var wire 32 K pc_io_pc4 [31:0] $end
   $var wire  1 m regfile_clock $end
   $var wire  5 : regfile_io_r1 [4:0] $end
   $var wire  5 ; regfile_io_r2 [4:0] $end
   $var wire  5 9 regfile_io_rd_sel [4:0] $end
   $var wire  1 ( regfile_io_regwrite $end
   $var wire 32 = regfile_io_rs1 [31:0] $end
   $var wire 32 > regfile_io_rs2 [31:0] $end
   $var wire 32 < regfile_io_writedata [31:0] $end
   $var wire  1 n reset $end
   $scope module Instruction $end
    $var wire  1 m clock $end
    $var wire 32 # io_rdData [31:0] $end
    $var wire 10 J io_wrAddr [9:0] $end
    $var wire 10 J mem__T_11_addr [9:0] $end
    $var wire 32 # mem__T_11_data [31:0] $end
    $scope module BindsTo_0_Instruction_Inst $end
     $var wire  1 m clock $end
     $var wire 32 # io_rdData [31:0] $end
     $var wire 10 J io_wrAddr [9:0] $end
    $upscope $end
   $upscope $end
   $scope module alu $end
    $var wire  5 5 io_cntrl [4:0] $end
    $var wire 32 6 io_out [31:0] $end
    $var wire 32 3 io_rs1 [31:0] $end
    $var wire 32 4 io_rs2 [31:0] $end
   $upscope $end
   $scope module alucontrol $end
    $var wire  3 ) io_aluop [2:0] $end
    $var wire  3 7 io_fnc3 [2:0] $end
    $var wire  1 8 io_fnc7 $end
    $var wire  5 5 io_out [4:0] $end
   $upscope $end
   $scope module control $end
    $var wire  3 ) io_aluop [2:0] $end
    $var wire  2 , io_extend [1:0] $end
    $var wire  1 ' io_memread $end
    $var wire  1 ' io_memtoreg $end
    $var wire  1 & io_memwrite $end
    $var wire  2 - io_nxtpc [1:0] $end
    $var wire  2 * io_opA [1:0] $end
    $var wire  1 + io_opB $end
    $var wire  7 % io_opcode [6:0] $end
    $var wire  1 ( io_regwrite $end
   $upscope $end
   $scope module immediate $end
    $var wire 12 C combined0 [11:0] $end
    $var wire 13 E combined1 [12:0] $end
    $var wire  5 9 extract1 [4:0] $end
    $var wire  7 B extract2 [6:0] $end
    $var wire 20 D extract3 [19:0] $end
    $var wire 12 F extract4 [11:0] $end
    $var wire 32 2 io_Iout [31:0] $end
    $var wire 32 0 io_Sbout [31:0] $end
    $var wire 32 . io_Sout [31:0] $end
    $var wire 32 1 io_Ujout [31:0] $end
    $var wire 32 / io_Uout [31:0] $end
    $var wire 32 # io_inst [31:0] $end
    $var wire 32 L io_pc [31:0] $end
   $upscope $end
   $scope module jalr $end
    $var wire 32 = io_input1 [31:0] $end
    $var wire 32 2 io_input2 [31:0] $end
    $var wire 32 ? io_out [31:0] $end
   $upscope $end
   $scope module memory $end
    $var wire  1 m clock $end
    $var wire  8 A io_addd [7:0] $end
    $var wire 32 > io_data [31:0] $end
    $var wire  1 ' io_load $end
    $var wire 32 @ io_out [31:0] $end
    $var wire  1 & io_store $end
    $var wire 10 H mem__T_19_addr [9:0] $end
    $var wire 32 G mem__T_19_data [31:0] $end
    $var wire 10 H mem__T_23_addr [9:0] $end
    $var wire 32 > mem__T_23_data [31:0] $end
    $var wire  1 I mem__T_23_en $end
    $var wire  1 p mem__T_23_mask $end
   $upscope $end
   $scope module pc $end
    $var wire  1 m clock $end
    $var wire 32 $ io_input [31:0] $end
    $var wire 32 L io_pc [31:0] $end
    $var wire 32 K io_pc4 [31:0] $end
    $var wire 32 L reg$ [31:0] $end
   $upscope $end
   $scope module regfile $end
    $var wire  1 m clock $end
    $var wire  5 : io_r1 [4:0] $end
    $var wire  5 ; io_r2 [4:0] $end
    $var wire  5 9 io_rd_sel [4:0] $end
    $var wire  1 ( io_regwrite $end
    $var wire 32 = io_rs1 [31:0] $end
    $var wire 32 > io_rs2 [31:0] $end
    $var wire 32 < io_writedata [31:0] $end
    $var wire 32 M registers_0 [31:0] $end
    $var wire 32 N registers_1 [31:0] $end
    $var wire 32 W registers_10 [31:0] $end
    $var wire 32 X registers_11 [31:0] $end
    $var wire 32 Y registers_12 [31:0] $end
    $var wire 32 Z registers_13 [31:0] $end
    $var wire 32 [ registers_14 [31:0] $end
    $var wire 32 \ registers_15 [31:0] $end
    $var wire 32 ] registers_16 [31:0] $end
    $var wire 32 ^ registers_17 [31:0] $end
    $var wire 32 _ registers_18 [31:0] $end
    $var wire 32 ` registers_19 [31:0] $end
    $var wire 32 O registers_2 [31:0] $end
    $var wire 32 a registers_20 [31:0] $end
    $var wire 32 b registers_21 [31:0] $end
    $var wire 32 c registers_22 [31:0] $end
    $var wire 32 d registers_23 [31:0] $end
    $var wire 32 e registers_24 [31:0] $end
    $var wire 32 f registers_25 [31:0] $end
    $var wire 32 g registers_26 [31:0] $end
    $var wire 32 h registers_27 [31:0] $end
    $var wire 32 i registers_28 [31:0] $end
    $var wire 32 j registers_29 [31:0] $end
    $var wire 32 P registers_3 [31:0] $end
    $var wire 32 k registers_30 [31:0] $end
    $var wire 32 l registers_31 [31:0] $end
    $var wire 32 Q registers_4 [31:0] $end
    $var wire 32 R registers_5 [31:0] $end
    $var wire 32 S registers_6 [31:0] $end
    $var wire 32 T registers_7 [31:0] $end
    $var wire 32 U registers_8 [31:0] $end
    $var wire 32 V registers_9 [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000010000000000000100010011 #
b00000000000000000000000000000100 $
b0010011 %
0&
0'
1(
b001 )
b00 *
1+
b00 ,
b00 -
b00000000000000000000000000000010 .
b00000000010000000000000000000000 /
b00000000000000000000000000000010 0
b00000000000000000000000000000100 1
b00000000000000000000000000000100 2
b00000000000000000000000000000000 3
b00000000000000000000000000000100 4
b00000 5
b00000000000000000000000000000100 6
b000 7
08
b00010 9
b00000 :
b00100 ;
b00000000000000000000000000000100 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000100 ?
b00000000000000000000000000000000 @
b00000001 A
b0000000 B
b000000000010 C
b00000000010000000000 D
b0000000000010 E
b000000000100 F
b00000000000000000000000000000000 G
b0000000001 H
0I
b0000000000 J
b00000000000000000000000000000100 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
0m
1n
b00000000000000000000000000000100 o
1p
#1
b00000000010100000000000110010011 #
b00000000000000000000000000001000 $
b00000000000000000000000000000011 .
b00000000010100000000000000000000 /
b00000000000000000000100000000110 0
b00000000000000000000100000001000 1
b00000000000000000000000000000101 2
b00000000000000000000000000000101 4
b00000000000000000000000000000101 6
b00011 9
b00101 ;
b00000000000000000000000000000101 <
b000000000011 C
b00000000010100000000 D
b0100000000010 E
b000000000101 F
b0000000001 J
b00000000000000000000000000001000 K
b00000000000000000000000000000100 L
b00000000000000000000000000000100 O
1m
b00000000000000000000000000000101 o
#2
0m
#3
b00000001000000000000000011101111 #
b00000000000000000000000000011000 $
b1101111 %
b011 )
b10 *
0+
b10 -
b00000000000000000000000000000001 .
b00000001000000000000000000000000 /
b00000000000000000000100000001000 0
b00000000000000000000000000011000 1
b00000000000000000000000000010000 2
b00000000000000000000000000001100 3
b00000000000000000000000000000000 4
b11111 5
b00000000000000000000000000001100 6
b00001 9
b10000 ;
b00000000000000000000000000001100 <
b00000000000000000000000000010000 ?
b00000011 A
b000000000001 C
b00000001000000000000 D
b0100000000000 E
b000000010000 F
b0000000011 H
b0000000010 J
b00000000000000000000000000001100 K
b00000000000000000000000000001000 L
b00000000000000000000000000000101 P
1m
b00000000000000000000000000001100 o
#4
0m
#5
b01000000001100010000001000110011 #
b00000000000000000000000000011100 $
b0110011 %
b000 )
b00 *
b00 -
b00000000000000000000010000000100 .
b01000000001100010000000000000000 /
b00000000000000000000010000011100 0
b00000000000000010000110000011010 1
b00000000000000000000010000000011 2
b00000000000000000000000000000100 3
b00000000000000000000000000000101 4
b01000 5
b11111111111111111111111111111111 6
18
b00100 9
b00010 :
b00011 ;
b11111111111111111111111111111111 <
b00000000000000000000000000000100 =
b00000000000000000000000000000101 >
b00000000000000000000010000000110 ?
b11111111 A
b0100000 B
b010000000100 C
b01000000001100010000 D
b0010000000100 E
b010000000011 F
b0011111111 H
b0000000110 J
b00000000000000000000000000011100 K
b00000000000000000000000000011000 L
b00000000000000000000000000001100 N
1m
b11111111111111111111111111111111 o
#6
0m
#7
b00000000000000001000000001100111 #
b00000000000000000000000000001100 $
b1100111 %
b011 )
b10 *
b11 -
b00000000000000000000000000000000 .
b00000000000000001000000000000000 /
b00000000000000000000000000011100 0
b00000000000000001000000000011100 1
b00000000000000000000000000000000 2
b00000000000000000000000000100000 3
b00000000000000000000000000000000 4
b11111 5
b00000000000000000000000000100000 6
08
b00000 9
b00001 :
b00000 ;
b00000000000000000000000000100000 <
b00000000000000000000000000001100 =
b00000000000000000000000000000000 >
b00000000000000000000000000001100 ?
b00001000 A
b0000000 B
b000000000000 C
b00000000000000001000 D
b0000000000000 E
b000000000000 F
b0000001000 H
b0000000111 J
b00000000000000000000000000100000 K
b00000000000000000000000000011100 L
b11111111111111111111111111111111 Q
1m
b00000000000000000000000000100000 o
#8
0m
#9
b00000000010000000010001000100011 #
b00000000000000000000000000010000 $
b0100011 %
1&
0(
b101 )
b00 *
1+
b10 ,
b00 -
b00000000000000000000000000000100 .
b00000000010000000010000000000000 /
b00000000000000000000000000010000 0
b00000000000000000010000000010000 1
b00000000000000000000000000000100 2
b00000000000000000000000000000000 3
b00000000000000000000000000000100 4
b00000 5
b00000000000000000000000000000100 6
b010 7
b00100 9
b00000 :
b00100 ;
b00000000000000000000000000000100 <
b00000000000000000000000000000000 =
b11111111111111111111111111111111 >
b00000000000000000000000000000100 ?
b00000001 A
b000000000100 C
b00000000010000000010 D
b0000000000100 E
b000000000100 F
b0000000001 H
1I
b0000000011 J
b00000000000000000000000000010000 K
b00000000000000000000000000001100 L
1m
b00000000000000000000000000000100 o
#10
0m
0n
#11
b00000000010000000010001010000011 #
b00000000000000000000000000010100 $
b0000011 %
0&
1'
1(
b100 )
b00 ,
b00000000000000000000000000000101 .
b00000000000000000000100000010100 0
b00000000000000000010000000010100 1
b00101 9
b11111111111111111111111111111111 <
b11111111111111111111111111111111 @
b000000000101 C
b0100000000100 E
b11111111111111111111111111111111 G
0I
b0000000100 J
b00000000000000000000000000010100 K
b00000000000000000000000000010000 L
1m
b11111111111111111111111111111111 o
#12
0m
#13
b00000000010100100000011001100011 #
b00000000000000000000000000100000 $
b1100011 %
0'
b010 )
0+
b01 -
b00000000000000000000000000001100 .
b00000000010100100000000000000000 /
b00000000000000000000000000100000 0
b00000000000000100000100000011000 1
b00000000000000000000000000000101 2
b11111111111111111111111111111111 3
b11111111111111111111111111111111 4
b10000 5
b00000000000000000000000000000001 6
b000 7
b01100 9
b00100 :
b00101 ;
b00000000000000000000000000000001 <
b11111111111111111111111111111111 =
b00000000000000000000000000000000 @
b00000000 A
b000000001100 C
b00000000010100100000 D
b0000000001100 E
b000000000101 F
b00000000000000000000000000000000 G
b0000000000 H
b0000000101 J
b00000000000000000000000000011000 K
b00000000000000000000000000010100 L
b11111111111111111111111111111111 R
1m
b00000000000000000000000000000001 o
#14
0m
#15
b00000000000000000000000000000000 #
b00000000000000000000000000100100 $
b0000000 %
b110 )
b11 *
1+
b01 ,
b00 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000100000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000 5
b00000000000000000000000000000000 6
b00000 9
b00000 :
b00000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b000000000000 C
b00000000000000000000 D
b0000000000000 E
b000000000000 F
b0000001000 J
b00000000000000000000000000100100 K
b00000000000000000000000000100000 L
b00000000000000000000000000000001 Y
1m
b00000000000000000000000000000000 o
#16
0m
#17
b00000000000000000000000000101000 $
b00000000000000000000000000100100 0
b00000000000000000000000000100100 1
b0000001001 J
b00000000000000000000000000101000 K
b00000000000000000000000000100100 L
1m
#18
0m
#19
b00000000000000000000000000101100 $
b00000000000000000000000000101000 0
b00000000000000000000000000101000 1
b0000001010 J
b00000000000000000000000000101100 K
b00000000000000000000000000101000 L
1m
#20
0m
#21
b00000000000000000000000000110000 $
b00000000000000000000000000101100 0
b00000000000000000000000000101100 1
b0000001011 J
b00000000000000000000000000110000 K
b00000000000000000000000000101100 L
1m
